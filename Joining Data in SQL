=======================================================================================================================================================================
                                                                    PART 1 Introduction to joins
------------------------INNER JOIN------------------------

-- Select fields
SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
  -- From countries (alias as c)
  FROM countries AS c
  -- Join to populations (as p)
  INNER JOIN populations AS p
    -- Match on country code
    ON c.code = p.country_code
  -- Join to economies (as e)
  INNER JOIN economies AS e
    -- Match on country code and year
    ON c.code = e.code AND e.year = p.year;
    
------------------------INNER JOIN (USING)------------------------

-- Select fields
Select c.name as country, continent, l.name as language, official
  -- From countries (alias as c)
  FROM countries as c
  -- Join to languages (as l)
  INNER JOIN languages as l
    -- Match using code
    USING(code)    

------------------------SELF-JOINS------------------------

-- Select fields with aliases
SELECT p1.country_code,
       p1.size AS size2010, 
       p2.size AS size2015,
       -- Calculate growth_perc
       ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc
-- From populations (alias as p1)
FROM populations AS p1
  -- Join to itself (alias as p2)
  INNER JOIN populations AS p2
    -- Match on country code
    ON p1.country_code = p2.country_code
        -- and year (with calculation)
        AND p1.year = p2.year - 5;
        
------------------------CASE, WHEN &, THEN------------------------

SELECT name, continent, code, surface_area,
    -- First case
    CASE WHEN surface_area > 2000000 THEN 'large'
        -- Second case
        WHEN surface_area > 350000 THEN 'medium'
        -- Else clause + end
        ELSE 'small' END
        -- Alias name
        AS geosize_group
-- From table
FROM countries;

------------------------INNER CHALLANGES------------------------

SELECT name, continent, code, surface_area,
    CASE WHEN surface_area > 2000000
            THEN 'large'
       WHEN surface_area > 350000
            THEN 'medium'
       ELSE 'small' END
       AS geosize_group
INTO countries_plus
FROM countries;

------------------------PRACTICE------------------------

SELECT country_code, size,
  CASE WHEN size > 50000000
            THEN 'large'
       WHEN size > 1000000
            THEN 'medium'
       ELSE 'small' END
       AS popsize_group
INTO pop_plus       
FROM populations
WHERE year = 2015;

-- Select fields
SELECT name, continent, geosize_group, popsize_group
-- From countries_plus (alias as c)
FROM countries_plus as c
  -- Join to pop_plus (alias as p)
  INNER JOIN pop_plus as p
    -- Match on country code
    ON c.code = p.country_code
-- Order the table    
ORDER BY geosize_group;

=======================================================================================================================================================================
                                                                    PART 2 Outer joins and cross joins
------------------------LEFT & RIGHT JOIN------------------------

-- Select fields
SELECT region, AVG(gdp_percapita) AS avg_gdp
-- From countries (alias as c)
From countries as c
  -- Left join with economies (alias as e)
  Left join economies as e
    -- Match on code fields
    ON c.code = e.code
-- Focus on 2010
WHERE year = 2010
-- Group by region
GROUP BY region
-- Order by descending avg_gdp
ORDER BY avg_gdp desc;

------------------------RIGHT JOIN------------------------

-- convert this code to use RIGHT JOINs instead of LEFT JOINs
/*
SELECT cities.name AS city, urbanarea_pop, countries.name AS country,
       indep_year, languages.name AS language, percent
FROM cities
  LEFT JOIN countries
    ON cities.country_code = countries.code
  LEFT JOIN languages
    ON countries.code = languages.code
ORDER BY city, language;
*/

SELECT cities.name AS city, urbanarea_pop, countries.name AS country,
       indep_year, languages.name AS language, percent
FROM languages
  RIGHT JOIN countries
    ON languages.code = countries.code
  RIGHT JOIN cities
    ON countries.code = cities.country_code
ORDER BY city, language;

------------------------FULL JOIN------------------------

-- Select fields (with aliases)
SELECT c1.name AS country, region, l.name AS language ,
       basic_unit, frac_unit
-- From countries (alias as c1)
FROM countries AS c1
  -- Join with languages (alias as l)
  FULL JOIN languages AS l
    -- Match on code
    USING (code)
  -- Join with currencies (alias as c2)
  FULL JOIN currencies AS c2
    -- Match on code
    USING (code)
-- Where region like Melanesia and Micronesia
WHERE region LIKE 'M%esia';

------------------------CROSS JOIN------------------------

-- Select fields
SELECT c.NAME AS city, l.name AS language
-- From cities (alias as c)
FROM cities AS c
  -- Join to languages (alias as l)
  CROSS JOIN languages AS l
-- Where c.name like Hyderabad
WHERE c.name LIKE 'Hyder%';

-- Select fields
SELECT c.NAME AS CITY, l.NAME AS LANGUAGE
-- From cities (alias as c)
FROM cities AS c
  -- Join to languages (alias as l)
  INNER JOIN languages AS l
    -- Match on country code
    ON c.country_code = l.code
-- Where c.name like Hyderabad
WHERE c.NAME LIKE 'Hyder%';

-- Select fields
SELECT c.NAME as country, region, p.life_expectancy as life_exp
-- From countries (alias as c)
FROM countries as c
  -- Join to populations (alias as p)
  LEFT JOIN populations as p
    -- Match on country code
    ON c.code = p.country_code
-- Focus on 2010
WHERE YEAR = 2010
-- Order by life_exp
ORDER BY life_exp
-- Limit to 5 records
LIMIT 5

=======================================================================================================================================================================
                                                                    PART 3 Set theory clauses
------------------------UNION------------------------

-- Select fields from 2010 table
SELECT *
  -- From 2010 table
  FROM economies2010
    -- Set theory clause
    UNION
-- Select fields from 2015 table
SELECT *
  -- From 2015 table
  FROM economies2015
-- Order by code and year
ORDER BY code, year;

-- Select field
SELECT country_code
  -- From cities
  FROM cities 
    -- Set theory clause
    UNION
-- Select field
SELECT code
  -- From currencies
  FROM currencies
-- Order by country_code
ORDER BY country_code;

------------------------UNION ALL------------------------

-- Select fields
SELECT code, year
  -- From economies
  FROM economies
    -- Set theory clause
    UNION ALL
-- Select fields
SELECT country_code, year
  -- From populations
  FROM populations
-- Order by code, year
ORDER BY code, year;

------------------------INTERSECT------------------------

-- Select fields
SELECT code, year
  -- From economies
  FROM economies 
    -- Set theory clause
    INTERSECT
-- Select fields
SELECT country_code, year
  -- From populations
  FROM populations
-- Order by code and year
ORDER BY code, year;

-- Select fields
SELECT name, code
  -- From countries
  from countries
    -- Set theory clause
    INTERSECT
-- Select fields
SELECT name, country_code
  -- From cities
  FROM cities;

------------------------EXCEPT------------------------

-- Select field
SELECT capital
  -- From countries
  FROM countries
    -- Set theory clause
    EXCEPT
-- Select field
SELECT name 
  -- From cities
  FROM cities
-- Order by ascending capital
ORDER BY capital asc;

------------------------SEMI-JOINS & ANTI-JOINS------------------------

Semi-joins
-- Query from step 1:
/*
SELECT code
  FROM countries
WHERE region = 'Middle East';
*/

-- Select field
SELECT DISTINCT(NAME)
  -- From languages
  FROM languages
-- Order by name
ORDER BY name ASC;

-- Query from step 2
SELECT DISTINCT name
  FROM languages
-- Where in statement
where code IN
  -- Query from step 1
  -- Subquery
  (SELECT code
   FROM countries
   WHERE region = 'Middle East')
-- Order by name
ORDER BY name;

Anti-joins
-- Select statement
SELECT count(name)
  -- From countries
  FROM countries
-- Where continent is Oceania
WHERE continent = 'Oceania'

-- Select fields (with aliases)
SELECT code, name, basic_unit as currency
  -- From countries (alias as c1)
  FROM countries as c1
      -- Join with currencies (alias as c2)
      INNER JOIN currencies as c2
    -- Match on code
    USING (code)
-- Where continent is Oceania
where continent = 'Oceania';

-- Select fields
select code, NAME
  -- From Countries
  FROM countries
  -- Where continent is Oceania
  WHERE continent = 'Oceania'
      -- And code not in
      AND code not in
      -- Subquery
      (SELECT code
    FROM currencies);

Challenges
-- Select the city name
SELECT name
  -- Alias the table where city name resides
  FROM cities AS c1
  -- Choose only records matching the result of multiple set theory clauses
  WHERE country_code IN
(
    -- Select appropriate field from economies AS e
    SELECT e.code
    FROM economies AS e
    -- Get all additional (unique) values of the field from currencies AS c2
    UNION
    SELECT c2.code
    FROM currencies AS c2
    -- Exclude those appearing in populations AS p
    EXCEPT
    SELECT p.country_code
    FROM populations AS p
);


=======================================================================================================================================================================
                                                                    PART 4 Subqueries
------------------------  ------------------------
